{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://food/./js/modules/calc.js","webpack://food/./js/modules/cards.js","webpack://food/./js/modules/forms.js","webpack://food/./js/modules/modal.js","webpack://food/./js/modules/slider.js","webpack://food/./js/modules/tabs.js","webpack://food/./js/modules/timer.js","webpack://food/./js/services/services.js","webpack://food/webpack/bootstrap","webpack://food/webpack/runtime/define property getters","webpack://food/webpack/runtime/hasOwnProperty shorthand","webpack://food/webpack/runtime/make namespace object","webpack://food/./js/script.js"],"sourcesContent":["function calc() {\r\n    // Цель: создать калькулятор калорий на сайте\r\n    // Задачи:\r\n    // 1. Создать функцию, которая будет видеть, какой из выбранных вариантов активный, и передавать соответствующее значение в итоговую формулу\r\n    // 2. Создать код, который будет передавать вводимые пользователем данные в итоговую формулу\r\n    // 3. Создать итоговую формулу расчёта калорий\r\n    // 4. Предусмотреть сохранение ранее введённых пользователем данных в localStorage\r\n\r\n    // для начала, в html-файле добавили id кнопкам выбора пола мужчины или женщины\r\n    // Затем посмотрим на общую формулу подсчёта калорий на случай, если вдруг нужны будут дополнительные данные, которые не указываются на сайте\r\n    // формула расчёта базовой нормы калорий\r\n    // для мужчин: BMR = 88.36 + (13.4 x вес, кг) + (4.8 х рост, см) – (5.7 х возраст, лет)\r\n    // для женщин: BMR = 447.6 + (9.2 x вес, кг) + (3.1 х рост, cм) – (4.3 х возраст, лет)\r\n    // коэффициент дневной активности:\r\n    // Минимальный уровень активности — 1.2\r\n    // Низкий уровень активности — 1.375\r\n    // Средний уровень активности — 1.55\r\n    // Высокий уровень — 1.725\r\n    // Очень высокий —  1.9\r\n    // Норма калорий = BMR x Уровень активности\r\n\r\n    // поскольку у уровней дневной активности фиксированные значения, их можно ввести как переменные или как data-атрибуты соответствующих кнопок выбора в html-файле\r\n\r\n    const result = document.querySelector('.calculating__result span') // это то поле, где на странице выводится итог расчёта калорий\r\n\r\n    let sex, height, weight, age, ratio ;// это переменные, которые являются частью формулы расчёта калорий\r\n\r\n    // т.к. мы используем сохранённые в localStorage данные, сделаем проверку, что если в хранилище есть сохранённые данные, то при новой загрузке будут подсвечены сохранённые значения\r\n    // если хранилище пусто, то используем значения переменных по умолчаниию (начальные значения, которые по замыслу дизайнера при открытии страницы подсвечены как бы по умолчанию)\r\n    if (localStorage.getItem('sex')) { // если в хранилище есть сохранённые данные\r\n        sex = localStorage.getItem('sex'); // значение пола подтягивается из хранилища\r\n    } else {\r\n        sex = 'female'; // иначе устанавливается начальное значение пола\r\n        localStorage.setItem('sex', 'female'); // которое сохраняется в хранилище\r\n    }\r\n    // то же самое прописываем для активности\r\n    if (localStorage.getItem('ratio')) { \r\n        ratio = localStorage.getItem('ratio');\r\n    } else {\r\n        ratio = 1.375; \r\n        localStorage.setItem('ratio', 1.375);\r\n    }\r\n\r\n    // создадим функцию, которая будет запускаться при первом открытии сайта и подсвечивать данные, взятые из localStorage, если такие имеются\r\n    function initLocalSettings(selector, activeClass) {\r\n        const elements = document.querySelectorAll(selector); // это все дивы с вариантами выбора\r\n        // переберём дивы, чтобы сперва очистить все от классов активности\r\n        // а затем класс активности присвоить тому варианту (диву), значение которого совпадёт со значением, сохранённым в localStorage\r\n        elements.forEach(elem => {\r\n            elem.classList.remove(activeClass);\r\n            if (elem.getAttribute('id') === localStorage.getItem('sex')) { // когда во время перебора будет найден элемент со значением пола, совпадающим с хранилищем, ему будет присвоен класс активности\r\n                elem.classList.add(activeClass);\r\n            }\r\n            if (elem.getAttribute('data-ratio') === localStorage.getItem('ratio')) { // когда во время перебора будет найден элемент со значением активности, совпадающим с хранилищем, ему будет присвоен класс активности\r\n                elem.classList.add(activeClass);\r\n            }\r\n        });\r\n\r\n    }\r\n    // инициализируем функцию для каждого инпута\r\n    initLocalSettings('#gender div', 'calculating__choose-item_active');\r\n    initLocalSettings('.calculating__choose_big div', 'calculating__choose-item_active');\r\n\r\n    // пропишем общую формулу расчёта калорий, делаем в виде функции, потому что она будет вызываться при каждом изменении того или иного поля на сайте\r\n    function calcTotal() {\r\n        if (!sex || !height || !weight || !age || !ratio) { // сперва нужно делать проверку, что все поля заполнены, делаем через оператор отрицания (если чего-то нет, сработает if)\r\n            result.textContent = '____'; // пользователь будет уведомлен, что что-то не так сделано\r\n            return; // выполнение фукнции на этом прекратиться\r\n        }\r\n\r\n        if (sex === 'female') { // пропишем формулу расчёта для женщин\r\n            result.textContent = Math.round((447.6 + (9.2 * weight) + (3.1 * height) - (4.3 * age)) * ratio);\r\n        } else { // пропишем формулу расчёта для мужчин\r\n            result.textContent = Math.round((88.36 + (13.4 * weight) + (4.8 * height) - (5.7 * age)) * ratio);\r\n        }\r\n    } \r\n    // инициализируем функцию, чтобы на странице при загрузке страницы было показано, что не все поля заполнены\r\n    calcTotal();\r\n\r\n    // пропишем функцию, которая будет отслеживать, какое из предложенных значений будет выбрано пользователем\r\n    // этот блок кода будет работать для выбора пола и уровня активности (там пользователь просто выбирает, ничего не вводит)\r\n    // для выбранного варианта надо также предусмотреть смену класса активности, это будет подсвечивать выбранный вариант зелёным\r\n    function getStaticInformation(selector, activeClass) {\r\n        const elements = document.querySelectorAll(selector); // сперва функция получает все дивы с вариантами, которые выбирает пользователь\r\n        // используем перебор дивов с вариантами, которые выбирает пользователь\r\n        elements.forEach(elem => {\r\n            elem.addEventListener('click', (e) => {\r\n                // данная функция работает с двумя блоками выборов: выбор пола и активности, но у дивов этих блоков разные атрибуты, которые функция будет вытягивать при выборе пользователя\r\n                // поэтому надо предусмотреть, что если у выбранного элемента есть data-атрибут (он предусмотрен для активности), то функция будет вытягивать такой атрибут, если его нет, функция будет вытягивать id (это предусмотрено для пола)\r\n                if (e.target.getAttribute('data-ratio')) {\r\n                    ratio = +e.target.getAttribute('data-ratio');\r\n                    localStorage.setItem('ratio', +e.target.getAttribute('data-ratio')); // сохраняем в localStorage введённые пользователем данные\r\n                } else {\r\n                    sex = e.target.getAttribute('id');\r\n                    localStorage.setItem('sex', e.target.getAttribute('id')); // сохраняем в localStorage введённые пользователем данные\r\n                }\r\n    \r\n                // предусмотрим смену класса активности у выбранного элемента\r\n                elements.forEach(elem => { // сперва у всех дивов внутри родительского элемента убираем класс активности\r\n                    elem.classList.remove(activeClass);\r\n                });\r\n                \r\n                e.target.classList.add(activeClass); // затем выбранной кнопке добавляем класс активности\r\n    \r\n                calcTotal(); // вызываем функцию, чтобы автоматически пересчитывался расчёт калорий\r\n            });\r\n        });\r\n    };\r\n    // теперь вызовем данную функцию сперва для блока с выбором пола, у него есть свой id, по нему и вызовем функциб\r\n    getStaticInformation('#gender div', 'calculating__choose-item_active');\r\n    // затем для блока с выбором активности\r\n    getStaticInformation('.calculating__choose_big div', 'calculating__choose-item_active');\r\n\r\n    // теперь создадим функцию, которая будет вытягивать данные из инпутов - полей, заполненных пользователям\r\n    // функция будет одна, но вызываться для каждого инпута\r\n    function getDynamicInformation(selector) { // функция будет принимать аргументом селектор, позволяющий определить, из какого поля будет браться информация (веса, роста или возраста в нашем случае)\r\n        const input = document.querySelector(selector);\r\n\r\n        input.addEventListener('input', () => { // будет срабатывать при каждом изменении ввода пользователем\r\n            // сперва делаем проверку того, правильно ли пользователь вводит данные (дб только цифры)\r\n            if (input.value.match(/\\D/g)) { // если пользователь вводит нечисловые символы, его предупредят о недопустимости подобного, в данном случае это делается обводкой красным, а мб сообщением или ещё как\r\n                input.style.border = '1px solid red'; // поле ввода будет обведено красным\r\n            } else { // если всё нормально, поле ввода станет обычного цвета\r\n                input.style.border = 'none'\r\n            }\r\n            // т.к. функция едина на три варианта данных (возраст, вест, рост), она должна понимать, с каким именно полем она работает, для этого используем switch case и id\r\n            switch(input.getAttribute('id')) { // свитч проверяет, какой атрибут у поля, куда вводит данные пользователь\r\n                case 'height': // если это рост\r\n                    height = +input.value; // значение данного поля присваивается переменной роста\r\n                    break; // затем код заканчивает работу\r\n                case 'weight': // та же логика с весом\r\n                    weight = +input.value;\r\n                    break;\r\n                case 'age': // та же логика с ростом\r\n                    age = +input.value;\r\n                    break;\r\n            };\r\n\r\n            calcTotal(); // вызываем функцию, чтобы автоматически пересчитывался расчёт калорий\r\n        });\r\n    };\r\n    // теперь вызовем функцию с каждым инпутом\r\n    getDynamicInformation('#height');\r\n    getDynamicInformation('#weight');\r\n    getDynamicInformation('#age');\r\n}\r\n\r\nexport default calc;","import {getResource} from \"../services/services\";\r\n\r\nfunction cards() {\r\n    // Задачи по этому проекту:\r\n    // Цель: создать шаблон создания карточек с выбором питания и ценой\r\n    // Задачи:\r\n    // 1. Создать класс карточек\r\n    // 2. Прописать код, который будет создавать карточки с едой динамически\r\n\r\n    //Мой код\r\n    // в своём решении я отдельно создаю класс как объект с определёнными свойствами, а также отдельно функцию, которая\r\n    // будет создавать элемент вёрстки, используя свойства и значения объекта класса\r\n    // в конце я вручную вызову функцию и тем самым создам три элемента\r\n    // в решени преподавателя функция по созданию вёрстки прописывается как один из методов класса, что даёт тот же результат, \r\n    // но лаконичнее по итогу и универсальнее в будущем \r\n\r\n    // const allMenu = document.querySelectorAll('.menu__item');\r\n\r\n    // allMenu.forEach(el => {\r\n    //     el.remove();\r\n    // });\r\n\r\n    // class Div {\r\n    //     constructor(img, alt, type, description, price) {\r\n    //         this.img = img;\r\n    //         this.alt = alt;\r\n    //         this.type = type;\r\n    //         this.description = description;\r\n    //         this.price = price;\r\n    //     }\r\n    // }\r\n    \r\n    // const vegy = new Div('img/tabs/vegy.jpg', 'vegy', 'Фитнес', 'Меню \"Фитнес\" - это новый подход к приготовлению блюд: больше свежих овощей и фруктов. Продукт активных и здоровых людей. Это абсолютно новый продукт с оптимальной ценой и высоким качеством!', 229),\r\n    //       elite = new Div('img/tabs/elite.jpg', 'elite', 'Премиум', 'В меню “Премиум” мы используем не только красивый дизайн упаковки, но и качественное исполнение блюд. Красная рыба, морепродукты, фрукты - ресторанное меню без похода в ресторан!', 550),\r\n    //       post = new Div('img/tabs/post.jpg', 'post', 'Постное', 'Меню “Постное” - это тщательный подбор ингредиентов: полное отсутствие продуктов животного происхождения, молоко из миндаля, овса, кокоса или гречки, правильное количество белков за счет тофу и импортных вегетарианских стейков.', 430);\r\n\r\n\r\n    // function createNewDiv(obj) {\r\n    //     const menu = document.querySelector('[data-class]')\r\n    //     let div = document.createElement('div');\r\n    //     div.classList.add('menu__item');\r\n    //     div.innerHTML = `\r\n    //     <img src=${obj.img} alt=${obj.alt} />\r\n    //     <h3 class=\"menu__item-subtitle\">Меню \"${obj.type}\"</h3>\r\n    //     <div class=\"menu__item-descr\">\r\n    //         ${obj.description}\r\n    //     </div>\r\n    //     <div class=\"menu__item-divider\"></div>\r\n    //     <div class=\"menu__item-price\">\r\n    //         <div class=\"menu__item-cost\">Цена:</div>\r\n    //         <div class=\"menu__item-total\"><span>${obj.price}</span> грн/день</div>\r\n    //     </div>\r\n    //     `;\r\n    //     menu.append(div);\r\n    // };\r\n\r\n    // createNewDiv(vegy);\r\n    // createNewDiv(elite);\r\n    // createNewDiv(post);\r\n\r\n    // код преподавателя\r\n    // создаём класс (шаблон карточек меню)\r\n    // в данной версии будет применён rest оператор на случай, если в будущем при создании элемента захочется указать какие-либо классы\r\n    class MenuCard {\r\n        constructor(img, altimg, title, descr, price, parentSelector, ...classes) { \r\n            this.img = img;\r\n            this.altimg = altimg;\r\n            this.title = title;\r\n            this.descr = descr;\r\n            this.price = price;\r\n            this.classes = classes;\r\n            this.parent = document.querySelector(parentSelector);\r\n            this.transfer = 27; // указываем курс, по кт доллары будут переводиться в гривны\r\n            this.changeToUAH(); // при создании объекта создадуться свойства и сразу будет вызван метод, который переведёт доллары в гривны\r\n        }\r\n        // создаём метод для конвертации долларов в гривны\r\n        changeToUAH() {\r\n            this.price = this.price * this.transfer;\r\n        } // его можно вызвать или на этапе вёрстки (метод render), или в конструкторе\r\n        // создаём метод, который будет создавать нужную нам вёрстку\r\n        render() {\r\n            let element = document.createElement('div');\r\n            if (this.classes.length === 0) {\r\n                this.element = 'menu__item';\r\n                element.classList.add(this.element);\r\n            } else {\r\n                this.classes.forEach(className => element.classList.add(className));\r\n            }\r\n            \r\n            element.innerHTML = ` \r\n                <img src=${this.img} alt=${this.altimg} />\r\n                <h3 class=\"menu__item-subtitle\">Меню \"${this.title}\"</h3>\r\n                <div class=\"menu__item-descr\">\r\n                    ${this.descr}\r\n                </div>\r\n                <div class=\"menu__item-divider\"></div>\r\n                <div class=\"menu__item-price\">\r\n                    <div class=\"menu__item-cost\">Цена:</div>\r\n                    <div class=\"menu__item-total\"><span>${this.price}</span> грн/день</div>\r\n                </div>\r\n            `; \r\n            this.parent.append(element);\r\n        }\r\n    }\r\n\r\n    // создадим функцию, которая будет запрашивать данные у сервера и на их основе формировать карточки меню\r\n    // мы поместили эту функцию в папку services, потому что эта функция универсальна и может использоваться в любом модуле\r\n    // тут была функция getResource\r\n\r\n    // Обычный вариант кода\r\n    getResource('http://localhost:3000/menu') // обращаемся к серверу за данными\r\n        .then(data => { // полученные от сервера данные в виде массива перебираем, превращая каждый элемент в карточку меню\r\n            data.forEach(({img, altimg, title, descr, price}) => { // используем деструктуризацию, чтобы меньше писать в аргументах new MenuCard\r\n                new MenuCard(img, altimg, title, descr, price, '.menu .container').render();\r\n            });\r\n        });\r\n    \r\n    // Альтернативный вариант кода с использованием axios-библиотеки\r\n    // axios.get('http://localhost:3000/menu')\r\n    // .then(data => {\r\n    //     data.data.forEach(({img, altimg, title, descr, price}) => { // data повторяется дважды, потому что axios возвращает объект (который в функции обозначен как data) со свойством data\r\n    //         new MenuCard(img, altimg, title, descr, price, '.menu .container').render();\r\n    //     });\r\n    // });\r\n\r\n    // Альтернативный вариант кода по созданию карточек меню, он приемлем, когда нужно разово что-то создать\r\n    // getResource('http://localhost:3000/menu')\r\n    //     .then(data => createCard(data));\r\n    \r\n    // function createCard(data) {\r\n    //     data.forEach(({img, altimg, title, descr, price}) => {\r\n    //         const element = document.createElement('div');\r\n\r\n    //         element.classList.add('menu__item');\r\n\r\n    //         element.innerHTML = ` \r\n    //             <img src=${img} alt=${altimg} />\r\n    //             <h3 class=\"menu__item-subtitle\">Меню \"${title}\"</h3>\r\n    //             <div class=\"menu__item-descr\">\r\n    //                 ${descr}\r\n    //             </div>\r\n    //             <div class=\"menu__item-divider\"></div>\r\n    //             <div class=\"menu__item-price\">\r\n    //                 <div class=\"menu__item-cost\">Цена:</div>\r\n    //                 <div class=\"menu__item-total\"><span>${price}</span> грн/день</div>\r\n    //             </div>\r\n    //         `; \r\n\r\n    //         document.querySelector('.menu .container').append(element);\r\n    //     })\r\n    // }\r\n}\r\n\r\nexport default cards;","import {closeModal, openModal} from \"./modal\";\r\nimport {postData} from \"../services/services\";\r\n\r\nfunction forms(formSelector) {\r\n    // Цель: реализовать скрипт отправки данных на сервер, кт пользователь заполняет и отправляет кнопкой \"Перезвонить мне\" без перезагрузки страницы\r\n    // Задачи:\r\n    // 1. Создать функцию, которая будет брать введённые данные и отправлять их серверу\r\n    \r\n    // объявим переменные\r\n\r\n    const forms = document.querySelectorAll(formSelector); // это переменная для обозначения всех форм, которые заполняет пользователь и отправляет кнопкой \"Перезвонить мне\"\r\n    \r\n    const message = { // этот объект будет содержать в себе все фразы, которые должны будут выводиться пользователю в зависимости от того, успешно отправились данные серверу или нет (при нажатии кнопки \"Перезвонить мне\")\r\n        loading: 'img/form/spinner.svg',\r\n        success: 'Спасибо! Скоро мы с вами свяжемся',\r\n        failure: 'Что-то пошло не так...'\r\n    };\r\n\r\n    // ниже есть функция по отправке данных на сервер, здесь же пропишем перебор всех наших форм, чтобы при отправки любой из форм срабатывала наша функция\r\n\r\n    forms.forEach(item => {\r\n        bindPostData(item);\r\n    });\r\n\r\n    // создадим переменную функцию по отправке запроса на сервер, чтобы такую функцию можно было использовать неоднократно и не писать большой код каждый раз\r\n    // такую функцию мы выделили в отдельный js-файл в папке services, потому что эта функция фактически универсальна и может использоваться в любом модуле\r\n    // тут была функция postData\r\n\r\n    // пропишем функцию по отправке данных на сервер\r\n    // это вариант с отправкой FormData\r\n    // function bindPostData(form) { // в качестве параметра передаём форму, потому что на неё легко навесить нужный нам обработчик событий\r\n    //     form.addEventListener('submit', (e) => { // событие submit срабатывает каждый раз, когда пользователь отправляет форму\r\n    //         e.preventDefault(); // используем, чтобы не сработал встроенный сценарий - перезагрузка страницы\r\n\r\n    //         // чтобы взаимодействовать с пользователем, предусмотрим, что когда он нажимает кнопку, чтобы отправить данные, ему выходило промежуточное сообщение, что идёт загрузка данных\r\n    //         const statusMessage = document.createElement('img');\r\n    //         statusMessage.src = message.loading;\r\n    //         statusMessage.style.cssText = `\r\n    //             display: block;\r\n    //             margin: 0 auto;\r\n    //         `;\r\n\r\n    //         form.insertAdjacentElement('afterend', statusMessage);\r\n\r\n    //         // так как в HTML обычной для заполнения используют form, в JS для этого существует специальный объект, который можно использовать для передачи данных серверу\r\n    //         const formData = new FormData(form);\r\n\r\n    //         // создадим fetch запрос\r\n    //         fetch('server.php', {\r\n    //             method: 'POST',\r\n    //             body: formData\r\n    //         })\r\n    //         .then(data => data.text()) // data это те данные, что вернутся от сервера, их нужно преобразовать в удобный для нас формат\r\n    //         .then(data => { \r\n    //             console.log(data);\r\n    //             showThanksModal(message.success);  \r\n    //             statusMessage.remove();\r\n    //         })\r\n    //         .catch(() => {\r\n    //             showThanksModal(message.failure); \r\n    //         })\r\n    //         .finally(() => {\r\n    //             form.reset();\r\n    //         })\r\n    //     }); \r\n    // }\r\n\r\n    // это вариант с итоговой отправкой не FormData, а JSON-строки\r\n    function bindPostData(form) {\r\n        form.addEventListener('submit', (e) => { \r\n            e.preventDefault(); \r\n\r\n            let statusMessage = document.createElement('img');\r\n            statusMessage.src = message.loading;\r\n            statusMessage.style.cssText = `\r\n                display: block;\r\n                margin: 0 auto;\r\n            `;\r\n\r\n            form.insertAdjacentElement('afterend', statusMessage);\r\n\r\n            const formData = new FormData(form);\r\n\r\n            const json = JSON.stringify(Object.fromEntries(formData.entries()));\r\n\r\n            postData('http://localhost:3000/requests', json) // обращаемся к json-server\r\n             // т.к. fetch возвращает промис, то через then пропишем код, который вернётся в случае успешной отправки данных на сервер\r\n            .then(data => { // data это те данные, что вернутся от сервера\r\n                console.log(data);\r\n                showThanksModal(message.success); \r\n                statusMessage.remove();\r\n            }).catch(() => {\r\n                showThanksModal(message.failure); \r\n            }).finally(() => {\r\n                form.reset(); \r\n            })\r\n            \r\n        }); \r\n    }\r\n\r\n    //пропишем функцию, которая при успешной отправке данных пользователя будет создавать новое наполнение модального окна и будет показывать это наполнение пользователю\r\n    function showThanksModal(message) {\r\n        const prevModalDialog = document.querySelector('.modal__dialog'); // получаем элемент, который будет заменяться на вновь созданный\r\n\r\n        prevModalDialog.classList.add('hide'); // в случае успешной отправки данных пользователя, изначальное наполнение модального окна будет скрыто\r\n        // openModal('.modal', modalTimerId); // заново открываем само модальное окно\r\n\r\n        const thanksModal = document.createElement('div'); // создаём элемент, которым будет заменяться прежнее содержание модального окна\r\n        thanksModal.classList.add('.modal__dialog');\r\n        thanksModal.innerHTML = `\r\n            <div class='modal__content'>\r\n                <div data-close class=\"modal__close\">&times;</div>\r\n                <div class=\"modal__title\">${message}</div>\r\n            </div>\r\n        `;\r\n\r\n        document.querySelector('.modal').append(thanksModal); // добавляем созданный блок в HTML\r\n        // после того, как данные отправились и пользователь увидел новое содержание модального окна, \r\n        // модальное окно нужно вернуть в прежнее состояние, чтобы при его новом открытии пользователь видел форму для заполнения, а не сообщение, что всё отправлено\r\n        setTimeout(() => { // через какое-то время наша функция сама обновит содержимое модального окна\r\n            thanksModal.remove(); // удаляем блок с уведомлением\r\n            prevModalDialog.classList.remove('hide');\r\n            closeModal('.modal'); // закрываем модальное окно\r\n        }, 4000);\r\n\r\n    }\r\n}\r\n\r\nexport default forms;","    // чтобы модальное окно не октрывалось повторно в сценарии, когда сперва пользователь сам открыл модальное окно, а потом сайт ему повторно открыл это окно,\r\n    // в функции openModal предусмотрим отключение таймера\r\nfunction openModal(modalSelector, modalTimerId) {\r\n    const modal = document.querySelector(modalSelector);\r\n\r\n    modal.classList.add('show');\r\n    modal.classList.remove('hide');\r\n    document.body.style.overflow = 'hidden'; // теперь при открытии модального окна страница не будет прокручиваться\r\n\r\n    // пропишем условие, что отключение таймера будет только тогда, когда вообще есть запуск таймера\r\n    if (modalTimerId) {\r\n        clearInterval(modalTimerId);\r\n    }\r\n}\r\n\r\nfunction closeModal(modalSelector) {\r\n    const modal = document.querySelector(modalSelector);\r\n\r\n    modal.classList.add('hide');\r\n    modal.classList.remove('show');\r\n    document.body.style.overflow = ''; // теперь, когда модальное окно закрывается, страница вновь может прокручиваться\r\n}\r\n\r\nfunction modal(triggerSelector, modalSelector, modalTimerId) {\r\n    // Цель: создать модальное окно, которое будет отображаться при нажатии на кнопки \"связаться с нами\"\r\n    // Задачи:\r\n    // 1. Прописать код, который будет делать блок с модальным окном видимым (он уже создан в HTML, но в CSS у него стоит в display none, т.е. его не видно)\r\n    // 2. Прописать код, который будет закрывать модальное окно\r\n    // для начала, в HTML-файле, в нужных нам кнопках создадим триггер с помощью data-атрибута, например, data-modal, теперь мы отметили кнопки, чтобы в дальнейшем их лего было найти для работы в JS\r\n    // также введём data-атрибут для закрытия модального окна, например, data-close\r\n\r\n    const btnModal = document.querySelectorAll(triggerSelector),\r\n          modal = document.querySelector(modalSelector);\r\n\r\n    // мой код, здесь чисто открывание и закрывание модального окна\r\n    // btnModal.forEach(el => {\r\n    //     el.addEventListener('click', () => {\r\n    //         modal.style.display = 'block';\r\n    //     });\r\n    // });\r\n\r\n    // btnClose.forEach(el => {\r\n    //     el.addEventListener('click', () => {\r\n    //         modal.style.display = 'none';\r\n    //     });\r\n    // });\r\n\r\n    // код преподавателя\r\n    // для реализации этого кода пришлось в CSS-файл добавить класс hide, который скрывает элемент, и класс show, который показывает элемент\r\n    // чтобы во время того, как модальное окно открыто, остальная страница не прокручивалась (не скроллилась), вручную будем менять CSS стиль,\r\n    // который отвечает за прокрутку - overflow\r\n\r\n    btnModal.forEach(el => {\r\n        el.addEventListener('click', () => openModal(modalSelector, modalTimerId)); // мы оборачиваем нужную функцию в анонимную, потому что, если мы сразу укажем нужную функцию с аргументом, \r\n        // это будет означать её вызов, а нам не надо вызывать функцию в данном синтаксисе, а надо просто указать, какая функция сработает, когда сработает обработчик событий\r\n    });\r\n\r\n    // альтернативный код с использование toggle\r\n    // btnModal.forEach(el => {\r\n    //     el.addEventListener('click', () => {\r\n    //         modal.classList.toggle('show');\r\n    //         document.body.style.overflow = 'hidden'; \r\n    //     });\r\n    // });\r\n    // btnClose.forEach(el => {\r\n    //     el.addEventListener('click', () => {\r\n    //         modal.classList.toggle('show');\r\n    //         document.body.style.overflow = ''; \r\n    //     });\r\n    // });\r\n    \r\n    // пропишем код, чтобы модальное окно закрывалось, когда пользователь нажмёт на подложку (зона вне модального окна)\r\n    // чтобы реализовать это, нужно отследить, куда нажимает пользователь, он должен кликать не на зону модального окна, а на иную часть\r\n    // в HTML всё, что вне модального окна, относится к родительскому элементу, который мы обозначили как modal\r\n\r\n    modal.addEventListener('click', (event) => {\r\n        if (event.target === modal || event.target.getAttribute('data-close') == '') { // если пользователь кликнул на зону вне модального окна или на крестик, оно закроется\r\n            closeModal(modalSelector);\r\n        }\r\n    });\r\n\r\n    // пропишем код, чтобы модальное окно закрывалось, когда пользователь нажмёт на кнопку esc\r\n    // для этого используем событие keydown, которое отслеживает нажатие клавиатуры,\r\n    // чтобы отследить нажатие именно клавиатуры, используем такое свойство event, как code\r\n    // так как нажатие клавиши не связано с зоной видимости элементов/страницы, её навешиваем на весь документ сразу\r\n    // также предусмотрим проверку не только нажатия кнопки esc, но и открыто ли модальное окно, чтобы событие, привязанное к esc, срабатывало только при открытом модальном окне\r\n    document.addEventListener('keydown', (event) => {\r\n        if (event.code === 'Escape' && modal.classList.contains('show')) {\r\n            closeModal(modalSelector);\r\n        }\r\n    });\r\n\r\n    // Дополнительная задача:\r\n    // 1. Прописать код, чтобы модальное окно открывалось автоматически, когда пользователь прокручивает страницу до конца\r\n    // 2. Прописать код, чтобы модальное окно открывалось автоматически через определённый промежуток времени\r\n    \r\n    //Мой код\r\n    // const modalTimerId = setTimeout(openModal, 3000); // модальное окно открывается после заданного времени\r\n    // этот код перенесли в основной js файл в качестве глобальной переменной, т.к. она используется и в модуле с модальными окнами, и в модуле с формами\r\n\r\n    // код преподавателя\r\n    //пропишем код, чтобы при прокручивании страницы до конца открывалось модальное окно\r\n    //window.pageYOffset показывает, сколько прокрутилось по вертикали\r\n    //document.documentElement.clientHeight показывает видимый размер элемента\r\n    //document.documentElement.scrollHeight показывает общий размер прокрутки\r\n    // если видимый размер элемента + то, сколько уже прокрутилось, равно или больше общего размера прокрутки, значит, пользователь дошёл до конца прокрутки страницы\r\n    // в некоторых браузерах может не срабатывать этот код по техническим причинам, в этом случае рекомендуется использовать document.documentElement.scrollHeight - 1\r\n    // чтобы модальное окно не вылазило каждый раз, когда прокрутка страницы заканчивается, можно предусмотреть однократное срабатывание, но в данном случае оно не подходит, \r\n    // так как обработчик привязан к прокручиванию, даже если на пиксель прокрутится страница, но до конца не дойдёт, код уже не сработает, поэтому лучше предусмотреть удаление обработчика событий\r\n\r\n    function showModalbyScroll() {\r\n        if (window.pageYOffset + document.documentElement.clientHeight >= document.documentElement.scrollHeight) {\r\n            openModal(modalSelector, modalTimerId);\r\n            window.removeEventListener('scroll', showModalbyScroll);\r\n        }\r\n    }\r\n\r\n    window.addEventListener('scroll', showModalbyScroll);\r\n}\r\n\r\nexport default modal;\r\n\r\nexport {closeModal};\r\nexport {openModal};","function slider({container, slide, nextArrow, prevArrow, totalCounter, currentCounter, wrapper, field}) { // в аргументах функции используем деструктуризацию, а сами аргументы укажем в основном js-файле в соответствующей функции\r\n    // создадим слайдер на сайте, вариант 1 - простой\r\n    // Цель: реализовать функционал слайдера\r\n    // Задачи:\r\n    // 1. Создать все блоки слайдера\r\n    // 2. Создать индекс для каждого слайдера\r\n    // 3. Реализовать функцию, которая будет скрывать ненужные слайдеры и создавать нужные\r\n    // 4. Реализовать функцию, которая будет реагировать на нажатие кнопок, влекущих смену слайда, причём в пределах количества слайдов\r\n    // 5. Отображать общее количество слайдов и номер текущего в формате 01-9\r\n\r\n    //создадим переменные\r\n    // const slides = document.querySelectorAll('.offer__slide'), // это все слайды на странице\r\n    //       prev = document.querySelector('.offer__slider-prev'), // это кнопка назад в выборе слайдов\r\n    //       next = document.querySelector('.offer__slider-next'), // это кнопка вперёд в выборе слайдов\r\n    //       total = document.querySelector('#total'),// это поле счётчика слайдов с общим количеством слайдов\r\n    //       current = document.querySelector('#current'); // это поле счётчика слайдов с номером текущего слайда\r\n\r\n    // let slideIndex = 1; // это индекс слайда, кт будет отображаться на сайте\r\n\r\n    // // инициализируем функцию (мы её прописали ниже), чтобы при первой загрузке страницы отражался только слайд по умолчанию\r\n    // showSlides(slideIndex);\r\n\r\n    // // при загрузке сайта пропишем код, чтобв показывались изначальные значения счётчика слайдов\r\n    // // мы не помещаем этот код в функцию showSlides, потому что она будет вызываться при каждом нажатии на стредки выбора слайдов и тогда определение и отображение общего количества слайдов в счётчике каждый раз будет заново срабатывать,\r\n    // // а это лишняя нагрузка на систему, нам достаточно один раз определить общее количество слайдов, при первой загрузке странице, дальше это делать не нужно\r\n    // if (slides.length < 10) { // если общее количество слайдов меньше 10, то показываем их количество в формате 01-9\r\n    //     total.textContent = `0${slides.length}`; \r\n    // } else { // если общее количество слайдом 10 или больше, просто показываем их количество\r\n    //     total.textContent = slides.length; \r\n    // };\r\n\r\n    // // создаём функцию по отображению слайдов\r\n    // function showSlides(n) {\r\n    //     if (n > slides.length) { // если номер слайда больше максимального количества слайдов, то будет показываться первый слайд (прокрутка вправо)\r\n    //         slideIndex = 1;\r\n    //     }\r\n\r\n    //     if (n < 1) { // если номер слайда меньше 1, то будет показываться последний слайд (прокрутка влево)\r\n    //         slideIndex = slides.length;\r\n    //     }\r\n\r\n    //     slides.forEach(item => item.style.display = 'none'); // скрыли все слайды\r\n\r\n    //     slides[slideIndex - 1].style.display = 'block'; // показываем нужный нам слайд\r\n\r\n    //     if (slides.length < 10) { // если общее количество слайдов меньше 10, то показываем номер текущего слайда в формате 01-9\r\n    //         current.textContent = `0${slideIndex}`; \r\n    //     } else { // если общее количество слайдом 10 или больше, просто показываем номер текущего слайда\r\n    //         current.textContent = slideIndex; \r\n    //     };\r\n    // }\r\n\r\n    // // создадим функцию по смене слайдов\r\n    // function plusSlides(n) {\r\n    //     showSlides(slideIndex += n); // если n = 1, будет показываться следующий слайд, если n = -1, то будет показываться предыдущий слайд\r\n    // }\r\n\r\n    // // навешиваем обработчики событий на стрелки prev и next\r\n    // prev.addEventListener('click', () => {\r\n    //     plusSlides(-1);\r\n    // });\r\n\r\n    // next.addEventListener('click', () => {\r\n    //     plusSlides(1);\r\n    // });\r\n\r\n    // создадим слайдер на сайте, вариант 2 - сложный, чтобы слайды менялись плавно, как бы прокручиваясь\r\n    // для этого варианта в html-файле все блоки с слайдами обернули в ещё один блок с классом offer__slider-inner\r\n    // это сделано для того, чтобы было создано как бы окно, в рамках которого будет происходить смена слайдов\r\n    // общая логика такая: есть общая обёртка для слайдов и их вновь созданной обёртки, у этой глобальной обёртки ширина будет 100% ширины одного слайда\r\n    // у вновь созданной обёртки слайдов ширина будет равна ширине всех слайдов, в нашем случае это 400% ширины одного слайды\r\n    // когда пользователь будет нажимать стрелки вперёд и назад, будет происходить не скрывание всех слайдов и отображение выбранного,\r\n    // а как бы перемещение видимой области с одного слайда на другой\r\n    // также создадим навигацию слайдов в виде точек, нажимая на ту или иную точку, пользователю будет показываться соответствующий слайд\r\n    const slides = document.querySelectorAll(slide), // это все слайды на странице\r\n          slider = document.querySelector(container), // это весь объект слайдера, который включает в себя, как счётчик слайдов, так и контейнер с слайдами\r\n          prev = document.querySelector(prevArrow), // это кнопка назад в выборе слайдов\r\n          next = document.querySelector(nextArrow), // это кнопка вперёд в выборе слайдов\r\n          total = document.querySelector(totalCounter),// это поле счётчика слайдов с общим количеством слайдов\r\n          current = document.querySelector(currentCounter), // это поле счётчика слайдов с номером текущего слайда\r\n          slidesWrapper = document.querySelector(wrapper), // это глобальная обёртка слайдов, куда входит обёртка слайдов и сами слайды\r\n          slidesField = document.querySelector(field), // это вновь созданная обёртка слайдов, в которую входят слайды и которая входит в глобальную обёртку\r\n          width = window.getComputedStyle(slidesWrapper).width; // получили размер ширины глобальной обёртки (она будет равна ширине слайда) через ComputedStyle\r\n    \r\n    let slideIndex = 1;\r\n    let offset = 0; // установили размер отступа, при достижении определённого значения отступа будет срабатывать код, передвигающий в видимую зону нужный слайд\r\n\r\n    // устанавливаем изначальный счётчик слайдов\r\n    if (slides.length < 10) {\r\n        total.textContent = `0${slides.length}`; // если общее количество слайдов меньше 10, то показываем их количество в формате 01-9\r\n        current.textContent = `0${slideIndex}`; // устанавливаем начальное значение текущего слайда\r\n    } else { // если общее количество слайдом 10 или больше, просто показываем их количество\r\n        total.textContent = slides.length; \r\n        current.textContent = slideIndex; \r\n    };\r\n\r\n    slidesField.style.width = 100 * slides.length + '%'; // для обёртки слайдов устанавливаем размер ширины, равный сумме ширин всех слайдов\r\n    slidesField.style.display = 'flex'; // для обёртки слайдов указываем, что внутри неё элементы располагаются по свойству flex (теперь они будут все в один ряд)\r\n    slidesField.style.transition = '0.5s all'; // для обёртки слайдов указываем свойство transition, которое меняет отображение элемента\r\n\r\n    // чтобы на сайте был видимым только один слайд, для глобальной обёртки установим свойству overflow значение hidden, чтобы оно скрывало всё то, что выходит за пределы ширины элемента\r\n    slidesWrapper.style.overflow = 'hidden';\r\n\r\n    slides.forEach(slide => { // Это делаем, чтобы установить всем слайдам одинаковую ширину (ширину глобальной обёртки)\r\n        slide.style.width = width;\r\n    });\r\n\r\n    slider.style.position = 'relative'; // меняем позицию на относительную\r\n\r\n    const indicators = document.createElement('ol'), // создадим наш элемент, куда потом поместим точки, это будет упорядоченный список\r\n          dots = []; // создаём пустой массив, в него потом поместим все созданные точки-навигаторы слайдов для более удобной работы\r\n\r\n    indicators.classList.add('carousel-indicators'); // добавляем CSS-класс\r\n    indicators.style.cssText = `\r\n        position: absolute;\r\n        right: 0;\r\n        bottom: 0;\r\n        left: 0;\r\n        z-index: 15;\r\n        display: flex;\r\n        justify-content: center;\r\n        margin-right: 15%;\r\n        margin-left: 15%;\r\n        list-style: none;\r\n    `; // стилизовали наш элемент\r\n    slider.append(indicators); // помещаем наш элемент в слайдер\r\n\r\n    // теперь нужно наполнить наш элемент непосредственно точками\r\n    for (let i = 0; i < slides.length; i++) { // перебирая слайды, создадим количество точек, равное количеству слайдов\r\n        const dot = document.createElement('li');\r\n        dot.setAttribute('data-slide-to', i + 1); // каждой созданной точке добавляем атрибут и значение атрибута (чтобы оно соответствовало индексу слайда)\r\n        dot.style.cssText = `\r\n            box-sizing: content-box;\r\n            flex: 0 1 auto;\r\n            width: 30px;\r\n            height: 6px;\r\n            margin-right: 3px;\r\n            margin-left: 3px;\r\n            cursor: pointer;\r\n            background-color: #fff;\r\n            background-clip: padding-box;\r\n            border-top: 10px solid transparent;\r\n            border-bottom: 10px solid transparent;\r\n            opacity: .5;\r\n            transition: opacity .6s ease;\r\n        `; // стилизуем наши точки\r\n        if (i == 0) { // для точки первого слайда установим видимость 1, чтобы на фоне остальных точек она подсвечивалась, что отражает её активный статус\r\n            dot.style.opacity = 1;\r\n        }\r\n\r\n        indicators.append(dot); // добавляем точки в созданный для них контейнер\r\n        dots.push(dot); // добавляем точку в массив\r\n    }\r\n\r\n    \r\n    // создадим функцию, которая будет увеличивать текущее значение индекса слайдера\r\n    function incCurrentIndex() {\r\n        if (slideIndex == slides.length) { // если индекс текущего слайда стал равен общему количеству слайдов, текущий индекс вновь приводим к изначальному значению (в нашем случае это 1)\r\n            slideIndex = 1;\r\n        } else { // в ином случае номер индекса увеличивается\r\n            slideIndex++; \r\n        }\r\n    };\r\n\r\n    // создадим функцию, которая будет уменьшать текущее значение индекса слайдера\r\n    function decCurrentIndex() {\r\n        if (slideIndex == 1) { // если индекс текущего слайда стал равен общему количеству слайдов, текущий индекс вновь приводим к изначальному значению (в нашем случае это 1)\r\n            slideIndex = slides.length;\r\n        } else { // в ином случае номер индекса увеличивается\r\n            slideIndex--; \r\n        }\r\n    };\r\n\r\n    // создадим функцию, которая будет менять текущее значение счётчика слайдера\r\n    function showCurrentSlide() {\r\n        if (slides.length < 10) { // если общее количество слайдов меньше 10, то в счётчике слайдов показываем номер индекса в формате 01-9\r\n            current.textContent = `0${slideIndex}`;\r\n        } else { // иначе в счётчике слайдов просто показываем номер индекса\r\n            current.textContent = slideIndex;\r\n        }\r\n    };\r\n\r\n    // создадим функцию, которая будет менять интенсивность видимости точки слайда\r\n    function showCurrentDot(dots) {\r\n        dots.forEach(dot => dot.style.opacity = '.5'); // каждой точке-навигатору ставим видимость в половинку\r\n        dots[slideIndex - 1].style.opacity = 1; // точке того слайда, который отобразится на странице, ставим максимальную видимость\r\n    };\r\n\r\n    // создадим функцию, которая будет брать строку, содержащую числовые значения, приводить её к числу и убирать нечисловые символы\r\n    function stringToNumber(str) {\r\n        str = +str.slice(0, -2);\r\n        return str;\r\n    };\r\n    \r\n    // создадим обработчик событий, чтобы передвигалась видимая зона слайдов с одного слайда на другой\r\n    // это также будет работать при нажатии стрелок вперёд и назад\r\n    // в первой версии слайдера изменение счётчика слайдов было прописано отдельной функцией, в этой версии изменение счётчика вшито в обработчики событий\r\n    next.addEventListener('click', () => {\r\n        if (offset == stringToNumber(width) * (slides.length - 1)) { // если ползунок докрутился до предельного значения, он возвращается в первоначальное значение\r\n            // используем метод replace, чтобы заменять нечисловые символы пустотой, для этого прописываем регулярное выражение /\\D/ (означает нечисловые символы) и флаг g (глобальный поиск)\r\n            offset = 0;\r\n        } else { // если ползунок не докрутился до предельного значения, прибавляем размер одного слайда, тем самым, зона видимости будет смещаться, показывая новый слайд\r\n            offset += stringToNumber(width); // пишем так, потому что width это, например, 650px, а нам в математике нужно убрать лишние буквы, делаем это через slice (можно через регулярные выражения)\r\n        }\r\n\r\n        slidesField.style.transform = `translateX(-${offset}px)`; // прописываем код, который будет смещать обёртку влево при нажатии кнопки назад или вперёд\r\n\r\n        incCurrentIndex();\r\n\r\n        showCurrentSlide();\r\n\r\n        showCurrentDot(dots);\r\n    });\r\n\r\n    prev.addEventListener('click', () => {\r\n        if (offset == 0) { // если ползунок докрутился до начального значения, он переходит в максимальное значение (к последнему слайду)\r\n            offset = stringToNumber(width) * (slides.length - 1);\r\n        } else { // если ползунок не докрутился до начального значения, минусуем размер одного слайда, тем самым, зона видимости будет смещаться, показывая новый слайд\r\n            offset -= stringToNumber(width); // пишем так, потому что width это, например, 650px, а нам в математике нужно убрать лишние буквы, делаем это через slice (можно через регулярные выражения)\r\n        }\r\n\r\n        slidesField.style.transform = `translateX(-${offset}px)`; // прописываем код, который будет смещать обёртку вправо при нажатии кнопки назад или вперёд\r\n\r\n        decCurrentIndex();\r\n\r\n        showCurrentSlide();\r\n\r\n        showCurrentDot(dots);\r\n    });\r\n\r\n    // пропишем код, чтобы когда пользователь нажимал на ту или иную точку, ему показывался соответствующий слайд\r\n    dots.forEach(dot => {\r\n        dot.addEventListener('click', (e) => {\r\n            const slideTo = e.target.getAttribute('data-slide-to'); // получаем порядковый номер точки, на которую нажал пользователь\r\n\r\n            slideIndex = slideTo; // так как все слайды пронумерованы через атрибут data-slide-to, а на slideIndex завязан функционал отображения слайдов и счётчика слайдов,\r\n            // то slideIndex присваиваем значение того слайда, который был выбран пользователем\r\n            offset = stringToNumber(width) * (slideTo - 1); // меняем значение offset (на нём завязано отображение нужного слайда)\r\n\r\n            slidesField.style.transform = `translateX(-${offset}px)`; // это меняет отображение слайдов, поэтому данный код также предусматриваем (как и при нажатии на кнопки вперёд и назад)\r\n\r\n            showCurrentSlide();\r\n\r\n            showCurrentDot(dots);\r\n        });\r\n    });\r\n}\r\n\r\nexport default slider;","function tabs(tabsSelector, tabsContentSelector, tabsParentSelector, activeClass) {\r\n    // Задачи по этому проекту:\r\n    // Цель: создать функционал, чтобы при выборе стилей питания менялась картинка и описание\r\n    // 1. Сделать так, чтобы другие блоки с информацией были неактивны\r\n    // 2. Сделать так, чтобы показать нужный блок\r\n    // 3. Создать обработчик события для задач выше\r\n    const tabs = document.querySelectorAll(tabsSelector), // создали переменную со всеми кнопками выбора вида питания\r\n          tabsContent = document.querySelectorAll(tabsContentSelector), // создали переменную со всеми контейнерами информации по видам питания\r\n          tabsParent = document.querySelector(tabsParentSelector); // создали переменную с родительским элементом для кнопок выбора вида питания\r\n    \r\n    // для выбора активного варианта вида питания будем использовать\r\n    // уже предусмотреннй класс tabheader__item_active, который присваивается нажатой кнопке выбора вида питания\r\n    // создаём функцию, которая будет скрывать контейнеры информации\r\n    function hideTabContent() {\r\n        tabsContent.forEach(item => {\r\n            item.style.display = 'none';\r\n        }); // скрываем все контейнеры информации\r\n        \r\n        tabs.forEach(item => {\r\n            item.classList.remove(activeClass)\r\n        }); // у каждого контейнера убираем класс активности\r\n    };\r\n\r\n    // создаём функцию, которая будет показывать нужный контейнер информации\r\n    function showTabContent(i = 0) { // в стандарте ES6 появилась возможность ставить значения по умолчанию, сейчас это первый элемент\r\n        tabsContent[i].style.display = 'block'; // выбранный контейнер (при помощи аргумента i) показываем\r\n        tabs[i].classList.add(activeClass); // добавляем выбранной кнопке вида питания класс активности\r\n    };\r\n\r\n    hideTabContent(); // скрыли все контейнеры информации\r\n    showTabContent(); // показали выбранный контейнер информации (по умолчанию, это первый вариант)\r\n\r\n    // создаём обработчик события, чтобы при клике на один из вариантов вида питания отображался нужный элемент\r\n    // при этом используем делегирование (обращаемся к родительскому элементу и навешиваем код на нужные дочерние элементы)\r\n    tabsParent.addEventListener('click', (event) => {\r\n        const target = event.target; // сделать переменную, чтобы потом писать меньше кода\r\n        \r\n        if (target && target.classList.contains(tabsSelector.slice(1))) { // используем slice, потому что тут надо указать класс без точки\r\n            // чтобы код сработал, нам надо узнать номер той кнопки, на которую кликнул пользователь\r\n            // это можно сделать через перебор\r\n            tabs.forEach((item, i) => {\r\n                if (target == item) { // если элемент, на который кликнули, будет совпадать с элементом, который мы перебираем, то сработает основной код\r\n                    hideTabContent(); // всё скрыли\r\n                    showTabContent(i); // показываем тот элемент, на который кликнули\r\n                };\r\n            });\r\n        };\r\n    });\r\n}\r\n\r\nexport default tabs;","function timer(id, deadline) {\r\n    // Цель: создать таймер отсчёта обратного времени на сайте\r\n    // Задачи:\r\n    // 1. Создать функцию, которая будет запускать таймер\r\n    // 2. Создать функцию, которая будет определять разницу во времени\r\n    // 3. Создать функцию, которая будет обновлять данные оставшегося времени\r\n\r\n    // итоговую дату, до которой будет идти таймер, в формате строки, введём как аргумент функции в основном js-файле\r\n\r\n    // создаём функцию, которая будет определять разницу между текущим временем пользователя\r\n    // и временем дедлайна\r\n    function getTimeRemaining(endtime) {\r\n        let days, hours, minutes, seconds;\r\n        let t = Date.parse(endtime) - Date.parse(new Date()); // из строки со временем создаём время и отнимаем текущее время\r\n\r\n        if (t <= 0) { // Добавляем проверку того, чтобы таймер не показывал отрицательное значение (если в deadline вдруг попадёт прошедшая дата)\r\n            days = 0; // всем значениям просто присваиваем нулевое значение\r\n            hours = 0; \r\n            minutes = 0;\r\n            seconds = 0;\r\n        } else {\r\n            days = Math.floor(t / (1000 * 60 * 60 * 24)), // из полученной разницы вычисляем количество оставшихся дней\r\n            hours = Math.floor((t / (1000 * 60 * 60)) % 24), // из поулченной разницы вычисляем количество часов, процент на остаток используется, чтобы вычислить часы в формате 24-часового времени\r\n            minutes = Math.floor((t / (1000 * 60)) % 60),// из поулченной разницы вычисляем количество минут, процент на остаток используется, чтобы вычислить минуты в формате 60-минутного часа\r\n            seconds = Math.floor((t / 1000) % 60);// из поулченной разницы вычисляем количество секунд, процент на остаток используется, чтобы вычислить секунды в формате 60-секундной минуты\r\n        }\r\n\r\n        return { // чтобы использовать переменные, которые мы создали внутри функции, за её пределами, мы будет возвращать объект с этими переменными в качестве значений свойств объекта\r\n            'total': t,\r\n            'days': days,\r\n            'hours': hours,\r\n            'minutes': minutes,\r\n            'seconds': seconds\r\n        };\r\n        // это изначальный блок кода, который был до дополнительного урока, он работающий, но при таком коде, если в дедлайне будет прошедшая дата,\r\n        // то на сайте в таймере будут отражены отрицательные значения, что некрасиво, поэтому лучше сразу предусмотреть проверку значения переменно t,\r\n        // если оно отрицательно, то просто будут выведены нули, если положительно, то сработает полный код\r\n        // let t = Date.parse(endtime) - Date.parse(new Date()), // из строки со временем создаём время и отнимаем текущее время\r\n        //       days = Math.floor(t / (1000 * 60 * 60 * 24)), // из полученной разницы вычисляем количество оставшихся дней\r\n        //       hours = Math.floor((t / (1000 * 60 * 60)) % 24), // из поулченной разницы вычисляем количество часов, процент на остаток используется, чтобы вычислить часы в формате 24-часового времени\r\n        //       minutes = Math.floor((t / (1000 * 60)) % 60),// из поулченной разницы вычисляем количество минут, процент на остаток используется, чтобы вычислить минуты в формате 60-минутного часа\r\n        //       seconds = Math.floor((t / 1000) % 60);// из поулченной разницы вычисляем количество секунд, процент на остаток используется, чтобы вычислить секунды в формате 60-секундной минуты\r\n        // return { // чтобы использовать переменные, которые мы создали внутри функции, за её пределами, мы будет возвращать объект с этими переменными в качестве значений свойств объекта\r\n        //     'total': t,\r\n        //     'days': days,\r\n        //     'hours': hours,\r\n        //     'minutes': minutes,\r\n        //     'seconds': seconds\r\n        // };\r\n    };\r\n\r\n    // это действие создаётся после написания всего кода, чтобы оптимизировать его для пользователя\r\n    // updateClock возвращает данные в том виде, каком получил (например, 9 часов), а иногда могут попросить отображать это в виде 09 часов\r\n    // для этого здесь придумаем функцию, которая будет проверять формат полученного значения и, если что, переводить его в формат \"00\"\r\n    function getZero(num) {\r\n        if (num >= 0 && num < 10) {\r\n            return `0${num}`;\r\n        } else {\r\n            return num;\r\n        };\r\n    };\r\n\r\n    // создаём функцию, которая будет устанавливать значения для таймера с сайта\r\n    function setClock(selector, endtime) { // selector - это элемент на странице, куда будут передаваться данные; endtime - время, которое будет передаваться на сайт\r\n        const timer = document.querySelector(selector), // создаём переменную с общим элементом таймера\r\n            days = timer.querySelector('#days'), // создаём отдельные части таймера с уже введёнными id соответствующих блоков\r\n            hours = timer.querySelector('#hours'),\r\n            minutes = timer.querySelector('#minutes'),\r\n            seconds = timer.querySelector('#seconds'),\r\n            timeInterval = setInterval(updateClock, 1000); // на сайте таймер должен обновляться ежесекундно, поэтому используем setInterval\r\n        \r\n        // это действие создаётся после написания всего кода, чтобы оптимизировать его для пользователя\r\n        // сперва на сайте задаётся изначальное значение, кт прописано в HTML, потом проходит секунда (установленная в setInterval) и начинает работать функция updateClock\r\n        // это некрасиво, поэтому здесь пропишется первая инициализация функции updateClock, чтобы она сработала при формировании страницы, а затем начнёт работат setInterval\r\n        updateClock();\r\n        // создаём функцию, которая будет обновлять таймер со страницы\r\n        function updateClock() {\r\n            const t = getTimeRemaining(endtime); // вычисляем разницу во времени при помощи вышенаписанной функции, кт вернёт объект с разными данными, кт ниже пойдут в соответствующие части таймера\r\n\r\n            days.innerHTML = getZero(t.days); // изначально было просто t.days, пока мы не придумали функцию getZero\r\n            hours.innerHTML = getZero(t.hours); // изначально было просто t.hours, пока мы не придумали функцию getZero\r\n            minutes.innerHTML = getZero(t.minutes); // изначально было просто t.minutes, пока мы не придумали функцию getZero\r\n            seconds.innerHTML = getZero(t.seconds); // изначально было просто t.seconds, пока мы не придумали функцию getZero\r\n            // теперь надо предусмотреть ограничитель, чтобы функция (и таймер) не работали бесконечно\r\n            // для этого мы ранее предусматривали дедлайн\r\n            if (t.total <= 0) {\r\n                clearInterval(timeInterval);\r\n            };\r\n        };\r\n    };\r\n\r\n    setClock(id, deadline);\r\n}\r\n\r\nexport default timer;","const postData = async (url, data) => {\r\n    // т.к. fetch это асинхронный код, то в данной функции сперва будет создаваться запрос, потом он будет присваиваться переменной, затем будет вызвана функция преобразования json() и, наконец, будет возвращён результат\r\n    // поэтому может быть ситуация, когда запрос ещё не обработался (не вернулся ответ от сервера), а дальнейший код уже выполняется, а раз ничего не вернулось, то это значит, что пока имеется значение underfined\r\n    // из-за этого может сработать ошибка (у underfined нет методов, например), и весь дальнейший код не сработает, поэтому нужно искусственно как бы превратить асинхронный код в подобние синхронного\r\n    // поэтому, во-первых, при создании функции мы указываем атрибут async (он показывает, что код внутри функции будет асинхронным), во-вторых, оператор await (который говорит, действие какого кода должна ждать следующая операция)\r\n    // атрибуты async и await парные! их нельзя использовать по одиночке!\r\n    let res = await fetch(url, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-type': 'application/json'\r\n        },\r\n        body: data\r\n    });\r\n\r\n    return await res.json();\r\n};\r\n\r\nasync function getResource(url) {\r\n    let res = await fetch(url);\r\n\r\n    if (!res.ok) {\r\n        throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n    }\r\n\r\n    return await res.json();\r\n};\r\n\r\nexport {postData};\r\nexport {getResource};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// все отдельные функции сайта распределены по модулям (в соответствующих JS-файлах), сейчас их нужно импортировать в этот JS-файл, который является главным\r\nimport tabs from './modules/tabs'; // мы не пишем в конце пути js, потому что Webpack сам знает, что это путь к js-файлу\r\nimport modal from './modules/modal';\r\nimport timer from './modules/timer';\r\nimport calc from './modules/calc';\r\nimport forms from './modules/forms';\r\nimport slider from './modules/slider';\r\nimport cards from './modules/cards';\r\nimport {openModal} from './modules/modal';\r\n\r\nwindow.addEventListener('DOMContentLoaded', () => {\r\n\r\n    const modalTimerId = setTimeout(() => openModal('.modal', modalTimerId), 50000);\r\n    // мы импортировали функции, теперь их нужно вызвать, чтобы они заработали\r\n    tabs('.tabheader__item', '.tabcontent', '.tabheader__items', 'tabheader__item_active');\r\n    modal('[data-modal]', '.modal', modalTimerId);\r\n    timer('.timer', '2023-10-27');\r\n    calc();\r\n    forms('form');\r\n    slider({ // аргументы-свойства можно прописать в любом порядке, потому что при создании функции мы использовали деструктуризацию\r\n        container: '.offer__slider', \r\n        slide: '.offer__slide', \r\n        nextArrow: '.offer__slider-next', \r\n        prevArrow: '.offer__slider-prev', \r\n        totalCounter: '#total', \r\n        currentCounter: '#current', \r\n        wrapper: '.offer__slider-wrapper', \r\n        field: '.offer__slider-inner'\r\n    });\r\n    cards();\r\n\r\n\r\n});\r\n\r\n\r\n\r\n\r\n"],"names":["calc","result","document","querySelector","sex","height","weight","age","ratio","localStorage","getItem","setItem","initLocalSettings","selector","activeClass","elements","querySelectorAll","forEach","elem","classList","remove","getAttribute","add","calcTotal","textContent","Math","round","getStaticInformation","addEventListener","e","target","getDynamicInformation","input","value","match","style","border","getResource","cards","MenuCard","constructor","img","altimg","title","descr","price","parentSelector","_len","arguments","length","classes","Array","_key","parent","transfer","changeToUAH","render","element","createElement","className","innerHTML","append","then","data","_ref","closeModal","openModal","postData","forms","formSelector","message","loading","success","failure","item","bindPostData","form","preventDefault","statusMessage","src","cssText","insertAdjacentElement","formData","FormData","json","JSON","stringify","Object","fromEntries","entries","console","log","showThanksModal","catch","finally","reset","prevModalDialog","thanksModal","setTimeout","modalSelector","modalTimerId","modal","body","overflow","clearInterval","triggerSelector","btnModal","el","event","code","contains","showModalbyScroll","window","pageYOffset","documentElement","clientHeight","scrollHeight","removeEventListener","slider","container","slide","nextArrow","prevArrow","totalCounter","currentCounter","wrapper","field","slides","prev","next","total","current","slidesWrapper","slidesField","width","getComputedStyle","slideIndex","offset","display","transition","position","indicators","dots","i","dot","setAttribute","opacity","push","incCurrentIndex","decCurrentIndex","showCurrentSlide","showCurrentDot","stringToNumber","str","slice","transform","slideTo","tabs","tabsSelector","tabsContentSelector","tabsParentSelector","tabsContent","tabsParent","hideTabContent","showTabContent","undefined","timer","id","deadline","getTimeRemaining","endtime","days","hours","minutes","seconds","t","Date","parse","floor","getZero","num","setClock","timeInterval","setInterval","updateClock","url","res","fetch","method","headers","ok","Error","status"],"sourceRoot":""}