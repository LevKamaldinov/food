function slider({container, slide, nextArrow, prevArrow, totalCounter, currentCounter, wrapper, field}) { // в аргументах функции используем деструктуризацию, а сами аргументы укажем в основном js-файле в соответствующей функции
    // создадим слайдер на сайте, вариант 1 - простой
    // Цель: реализовать функционал слайдера
    // Задачи:
    // 1. Создать все блоки слайдера
    // 2. Создать индекс для каждого слайдера
    // 3. Реализовать функцию, которая будет скрывать ненужные слайдеры и создавать нужные
    // 4. Реализовать функцию, которая будет реагировать на нажатие кнопок, влекущих смену слайда, причём в пределах количества слайдов
    // 5. Отображать общее количество слайдов и номер текущего в формате 01-9

    //создадим переменные
    // const slides = document.querySelectorAll('.offer__slide'), // это все слайды на странице
    //       prev = document.querySelector('.offer__slider-prev'), // это кнопка назад в выборе слайдов
    //       next = document.querySelector('.offer__slider-next'), // это кнопка вперёд в выборе слайдов
    //       total = document.querySelector('#total'),// это поле счётчика слайдов с общим количеством слайдов
    //       current = document.querySelector('#current'); // это поле счётчика слайдов с номером текущего слайда

    // let slideIndex = 1; // это индекс слайда, кт будет отображаться на сайте

    // // инициализируем функцию (мы её прописали ниже), чтобы при первой загрузке страницы отражался только слайд по умолчанию
    // showSlides(slideIndex);

    // // при загрузке сайта пропишем код, чтобв показывались изначальные значения счётчика слайдов
    // // мы не помещаем этот код в функцию showSlides, потому что она будет вызываться при каждом нажатии на стредки выбора слайдов и тогда определение и отображение общего количества слайдов в счётчике каждый раз будет заново срабатывать,
    // // а это лишняя нагрузка на систему, нам достаточно один раз определить общее количество слайдов, при первой загрузке странице, дальше это делать не нужно
    // if (slides.length < 10) { // если общее количество слайдов меньше 10, то показываем их количество в формате 01-9
    //     total.textContent = `0${slides.length}`; 
    // } else { // если общее количество слайдом 10 или больше, просто показываем их количество
    //     total.textContent = slides.length; 
    // };

    // // создаём функцию по отображению слайдов
    // function showSlides(n) {
    //     if (n > slides.length) { // если номер слайда больше максимального количества слайдов, то будет показываться первый слайд (прокрутка вправо)
    //         slideIndex = 1;
    //     }

    //     if (n < 1) { // если номер слайда меньше 1, то будет показываться последний слайд (прокрутка влево)
    //         slideIndex = slides.length;
    //     }

    //     slides.forEach(item => item.style.display = 'none'); // скрыли все слайды

    //     slides[slideIndex - 1].style.display = 'block'; // показываем нужный нам слайд

    //     if (slides.length < 10) { // если общее количество слайдов меньше 10, то показываем номер текущего слайда в формате 01-9
    //         current.textContent = `0${slideIndex}`; 
    //     } else { // если общее количество слайдом 10 или больше, просто показываем номер текущего слайда
    //         current.textContent = slideIndex; 
    //     };
    // }

    // // создадим функцию по смене слайдов
    // function plusSlides(n) {
    //     showSlides(slideIndex += n); // если n = 1, будет показываться следующий слайд, если n = -1, то будет показываться предыдущий слайд
    // }

    // // навешиваем обработчики событий на стрелки prev и next
    // prev.addEventListener('click', () => {
    //     plusSlides(-1);
    // });

    // next.addEventListener('click', () => {
    //     plusSlides(1);
    // });

    // создадим слайдер на сайте, вариант 2 - сложный, чтобы слайды менялись плавно, как бы прокручиваясь
    // для этого варианта в html-файле все блоки с слайдами обернули в ещё один блок с классом offer__slider-inner
    // это сделано для того, чтобы было создано как бы окно, в рамках которого будет происходить смена слайдов
    // общая логика такая: есть общая обёртка для слайдов и их вновь созданной обёртки, у этой глобальной обёртки ширина будет 100% ширины одного слайда
    // у вновь созданной обёртки слайдов ширина будет равна ширине всех слайдов, в нашем случае это 400% ширины одного слайды
    // когда пользователь будет нажимать стрелки вперёд и назад, будет происходить не скрывание всех слайдов и отображение выбранного,
    // а как бы перемещение видимой области с одного слайда на другой
    // также создадим навигацию слайдов в виде точек, нажимая на ту или иную точку, пользователю будет показываться соответствующий слайд
    const slides = document.querySelectorAll(slide), // это все слайды на странице
          slider = document.querySelector(container), // это весь объект слайдера, который включает в себя, как счётчик слайдов, так и контейнер с слайдами
          prev = document.querySelector(prevArrow), // это кнопка назад в выборе слайдов
          next = document.querySelector(nextArrow), // это кнопка вперёд в выборе слайдов
          total = document.querySelector(totalCounter),// это поле счётчика слайдов с общим количеством слайдов
          current = document.querySelector(currentCounter), // это поле счётчика слайдов с номером текущего слайда
          slidesWrapper = document.querySelector(wrapper), // это глобальная обёртка слайдов, куда входит обёртка слайдов и сами слайды
          slidesField = document.querySelector(field), // это вновь созданная обёртка слайдов, в которую входят слайды и которая входит в глобальную обёртку
          width = window.getComputedStyle(slidesWrapper).width; // получили размер ширины глобальной обёртки (она будет равна ширине слайда) через ComputedStyle
    
    let slideIndex = 1;
    let offset = 0; // установили размер отступа, при достижении определённого значения отступа будет срабатывать код, передвигающий в видимую зону нужный слайд

    // устанавливаем изначальный счётчик слайдов
    if (slides.length < 10) {
        total.textContent = `0${slides.length}`; // если общее количество слайдов меньше 10, то показываем их количество в формате 01-9
        current.textContent = `0${slideIndex}`; // устанавливаем начальное значение текущего слайда
    } else { // если общее количество слайдом 10 или больше, просто показываем их количество
        total.textContent = slides.length; 
        current.textContent = slideIndex; 
    };

    slidesField.style.width = 100 * slides.length + '%'; // для обёртки слайдов устанавливаем размер ширины, равный сумме ширин всех слайдов
    slidesField.style.display = 'flex'; // для обёртки слайдов указываем, что внутри неё элементы располагаются по свойству flex (теперь они будут все в один ряд)
    slidesField.style.transition = '0.5s all'; // для обёртки слайдов указываем свойство transition, которое меняет отображение элемента

    // чтобы на сайте был видимым только один слайд, для глобальной обёртки установим свойству overflow значение hidden, чтобы оно скрывало всё то, что выходит за пределы ширины элемента
    slidesWrapper.style.overflow = 'hidden';

    slides.forEach(slide => { // Это делаем, чтобы установить всем слайдам одинаковую ширину (ширину глобальной обёртки)
        slide.style.width = width;
    });

    slider.style.position = 'relative'; // меняем позицию на относительную

    const indicators = document.createElement('ol'), // создадим наш элемент, куда потом поместим точки, это будет упорядоченный список
          dots = []; // создаём пустой массив, в него потом поместим все созданные точки-навигаторы слайдов для более удобной работы

    indicators.classList.add('carousel-indicators'); // добавляем CSS-класс
    indicators.style.cssText = `
        position: absolute;
        right: 0;
        bottom: 0;
        left: 0;
        z-index: 15;
        display: flex;
        justify-content: center;
        margin-right: 15%;
        margin-left: 15%;
        list-style: none;
    `; // стилизовали наш элемент
    slider.append(indicators); // помещаем наш элемент в слайдер

    // теперь нужно наполнить наш элемент непосредственно точками
    for (let i = 0; i < slides.length; i++) { // перебирая слайды, создадим количество точек, равное количеству слайдов
        const dot = document.createElement('li');
        dot.setAttribute('data-slide-to', i + 1); // каждой созданной точке добавляем атрибут и значение атрибута (чтобы оно соответствовало индексу слайда)
        dot.style.cssText = `
            box-sizing: content-box;
            flex: 0 1 auto;
            width: 30px;
            height: 6px;
            margin-right: 3px;
            margin-left: 3px;
            cursor: pointer;
            background-color: #fff;
            background-clip: padding-box;
            border-top: 10px solid transparent;
            border-bottom: 10px solid transparent;
            opacity: .5;
            transition: opacity .6s ease;
        `; // стилизуем наши точки
        if (i == 0) { // для точки первого слайда установим видимость 1, чтобы на фоне остальных точек она подсвечивалась, что отражает её активный статус
            dot.style.opacity = 1;
        }

        indicators.append(dot); // добавляем точки в созданный для них контейнер
        dots.push(dot); // добавляем точку в массив
    }

    
    // создадим функцию, которая будет увеличивать текущее значение индекса слайдера
    function incCurrentIndex() {
        if (slideIndex == slides.length) { // если индекс текущего слайда стал равен общему количеству слайдов, текущий индекс вновь приводим к изначальному значению (в нашем случае это 1)
            slideIndex = 1;
        } else { // в ином случае номер индекса увеличивается
            slideIndex++; 
        }
    };

    // создадим функцию, которая будет уменьшать текущее значение индекса слайдера
    function decCurrentIndex() {
        if (slideIndex == 1) { // если индекс текущего слайда стал равен общему количеству слайдов, текущий индекс вновь приводим к изначальному значению (в нашем случае это 1)
            slideIndex = slides.length;
        } else { // в ином случае номер индекса увеличивается
            slideIndex--; 
        }
    };

    // создадим функцию, которая будет менять текущее значение счётчика слайдера
    function showCurrentSlide() {
        if (slides.length < 10) { // если общее количество слайдов меньше 10, то в счётчике слайдов показываем номер индекса в формате 01-9
            current.textContent = `0${slideIndex}`;
        } else { // иначе в счётчике слайдов просто показываем номер индекса
            current.textContent = slideIndex;
        }
    };

    // создадим функцию, которая будет менять интенсивность видимости точки слайда
    function showCurrentDot(dots) {
        dots.forEach(dot => dot.style.opacity = '.5'); // каждой точке-навигатору ставим видимость в половинку
        dots[slideIndex - 1].style.opacity = 1; // точке того слайда, который отобразится на странице, ставим максимальную видимость
    };

    // создадим функцию, которая будет брать строку, содержащую числовые значения, приводить её к числу и убирать нечисловые символы
    function stringToNumber(str) {
        str = +str.slice(0, -2);
        return str;
    };
    
    // создадим обработчик событий, чтобы передвигалась видимая зона слайдов с одного слайда на другой
    // это также будет работать при нажатии стрелок вперёд и назад
    // в первой версии слайдера изменение счётчика слайдов было прописано отдельной функцией, в этой версии изменение счётчика вшито в обработчики событий
    next.addEventListener('click', () => {
        if (offset == stringToNumber(width) * (slides.length - 1)) { // если ползунок докрутился до предельного значения, он возвращается в первоначальное значение
            // используем метод replace, чтобы заменять нечисловые символы пустотой, для этого прописываем регулярное выражение /\D/ (означает нечисловые символы) и флаг g (глобальный поиск)
            offset = 0;
        } else { // если ползунок не докрутился до предельного значения, прибавляем размер одного слайда, тем самым, зона видимости будет смещаться, показывая новый слайд
            offset += stringToNumber(width); // пишем так, потому что width это, например, 650px, а нам в математике нужно убрать лишние буквы, делаем это через slice (можно через регулярные выражения)
        }

        slidesField.style.transform = `translateX(-${offset}px)`; // прописываем код, который будет смещать обёртку влево при нажатии кнопки назад или вперёд

        incCurrentIndex();

        showCurrentSlide();

        showCurrentDot(dots);
    });

    prev.addEventListener('click', () => {
        if (offset == 0) { // если ползунок докрутился до начального значения, он переходит в максимальное значение (к последнему слайду)
            offset = stringToNumber(width) * (slides.length - 1);
        } else { // если ползунок не докрутился до начального значения, минусуем размер одного слайда, тем самым, зона видимости будет смещаться, показывая новый слайд
            offset -= stringToNumber(width); // пишем так, потому что width это, например, 650px, а нам в математике нужно убрать лишние буквы, делаем это через slice (можно через регулярные выражения)
        }

        slidesField.style.transform = `translateX(-${offset}px)`; // прописываем код, который будет смещать обёртку вправо при нажатии кнопки назад или вперёд

        decCurrentIndex();

        showCurrentSlide();

        showCurrentDot(dots);
    });

    // пропишем код, чтобы когда пользователь нажимал на ту или иную точку, ему показывался соответствующий слайд
    dots.forEach(dot => {
        dot.addEventListener('click', (e) => {
            const slideTo = e.target.getAttribute('data-slide-to'); // получаем порядковый номер точки, на которую нажал пользователь

            slideIndex = slideTo; // так как все слайды пронумерованы через атрибут data-slide-to, а на slideIndex завязан функционал отображения слайдов и счётчика слайдов,
            // то slideIndex присваиваем значение того слайда, который был выбран пользователем
            offset = stringToNumber(width) * (slideTo - 1); // меняем значение offset (на нём завязано отображение нужного слайда)

            slidesField.style.transform = `translateX(-${offset}px)`; // это меняет отображение слайдов, поэтому данный код также предусматриваем (как и при нажатии на кнопки вперёд и назад)

            showCurrentSlide();

            showCurrentDot(dots);
        });
    });
}

export default slider;