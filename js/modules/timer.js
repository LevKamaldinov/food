function timer(id, deadline) {
    // Цель: создать таймер отсчёта обратного времени на сайте
    // Задачи:
    // 1. Создать функцию, которая будет запускать таймер
    // 2. Создать функцию, которая будет определять разницу во времени
    // 3. Создать функцию, которая будет обновлять данные оставшегося времени

    // итоговую дату, до которой будет идти таймер, в формате строки, введём как аргумент функции в основном js-файле

    // создаём функцию, которая будет определять разницу между текущим временем пользователя
    // и временем дедлайна
    function getTimeRemaining(endtime) {
        let days, hours, minutes, seconds;
        let t = Date.parse(endtime) - Date.parse(new Date()); // из строки со временем создаём время и отнимаем текущее время

        if (t <= 0) { // Добавляем проверку того, чтобы таймер не показывал отрицательное значение (если в deadline вдруг попадёт прошедшая дата)
            days = 0; // всем значениям просто присваиваем нулевое значение
            hours = 0; 
            minutes = 0;
            seconds = 0;
        } else {
            days = Math.floor(t / (1000 * 60 * 60 * 24)), // из полученной разницы вычисляем количество оставшихся дней
            hours = Math.floor((t / (1000 * 60 * 60)) % 24), // из поулченной разницы вычисляем количество часов, процент на остаток используется, чтобы вычислить часы в формате 24-часового времени
            minutes = Math.floor((t / (1000 * 60)) % 60),// из поулченной разницы вычисляем количество минут, процент на остаток используется, чтобы вычислить минуты в формате 60-минутного часа
            seconds = Math.floor((t / 1000) % 60);// из поулченной разницы вычисляем количество секунд, процент на остаток используется, чтобы вычислить секунды в формате 60-секундной минуты
        }

        return { // чтобы использовать переменные, которые мы создали внутри функции, за её пределами, мы будет возвращать объект с этими переменными в качестве значений свойств объекта
            'total': t,
            'days': days,
            'hours': hours,
            'minutes': minutes,
            'seconds': seconds
        };
        // это изначальный блок кода, который был до дополнительного урока, он работающий, но при таком коде, если в дедлайне будет прошедшая дата,
        // то на сайте в таймере будут отражены отрицательные значения, что некрасиво, поэтому лучше сразу предусмотреть проверку значения переменно t,
        // если оно отрицательно, то просто будут выведены нули, если положительно, то сработает полный код
        // let t = Date.parse(endtime) - Date.parse(new Date()), // из строки со временем создаём время и отнимаем текущее время
        //       days = Math.floor(t / (1000 * 60 * 60 * 24)), // из полученной разницы вычисляем количество оставшихся дней
        //       hours = Math.floor((t / (1000 * 60 * 60)) % 24), // из поулченной разницы вычисляем количество часов, процент на остаток используется, чтобы вычислить часы в формате 24-часового времени
        //       minutes = Math.floor((t / (1000 * 60)) % 60),// из поулченной разницы вычисляем количество минут, процент на остаток используется, чтобы вычислить минуты в формате 60-минутного часа
        //       seconds = Math.floor((t / 1000) % 60);// из поулченной разницы вычисляем количество секунд, процент на остаток используется, чтобы вычислить секунды в формате 60-секундной минуты
        // return { // чтобы использовать переменные, которые мы создали внутри функции, за её пределами, мы будет возвращать объект с этими переменными в качестве значений свойств объекта
        //     'total': t,
        //     'days': days,
        //     'hours': hours,
        //     'minutes': minutes,
        //     'seconds': seconds
        // };
    };

    // это действие создаётся после написания всего кода, чтобы оптимизировать его для пользователя
    // updateClock возвращает данные в том виде, каком получил (например, 9 часов), а иногда могут попросить отображать это в виде 09 часов
    // для этого здесь придумаем функцию, которая будет проверять формат полученного значения и, если что, переводить его в формат "00"
    function getZero(num) {
        if (num >= 0 && num < 10) {
            return `0${num}`;
        } else {
            return num;
        };
    };

    // создаём функцию, которая будет устанавливать значения для таймера с сайта
    function setClock(selector, endtime) { // selector - это элемент на странице, куда будут передаваться данные; endtime - время, которое будет передаваться на сайт
        const timer = document.querySelector(selector), // создаём переменную с общим элементом таймера
            days = timer.querySelector('#days'), // создаём отдельные части таймера с уже введёнными id соответствующих блоков
            hours = timer.querySelector('#hours'),
            minutes = timer.querySelector('#minutes'),
            seconds = timer.querySelector('#seconds'),
            timeInterval = setInterval(updateClock, 1000); // на сайте таймер должен обновляться ежесекундно, поэтому используем setInterval
        
        // это действие создаётся после написания всего кода, чтобы оптимизировать его для пользователя
        // сперва на сайте задаётся изначальное значение, кт прописано в HTML, потом проходит секунда (установленная в setInterval) и начинает работать функция updateClock
        // это некрасиво, поэтому здесь пропишется первая инициализация функции updateClock, чтобы она сработала при формировании страницы, а затем начнёт работат setInterval
        updateClock();
        // создаём функцию, которая будет обновлять таймер со страницы
        function updateClock() {
            const t = getTimeRemaining(endtime); // вычисляем разницу во времени при помощи вышенаписанной функции, кт вернёт объект с разными данными, кт ниже пойдут в соответствующие части таймера

            days.innerHTML = getZero(t.days); // изначально было просто t.days, пока мы не придумали функцию getZero
            hours.innerHTML = getZero(t.hours); // изначально было просто t.hours, пока мы не придумали функцию getZero
            minutes.innerHTML = getZero(t.minutes); // изначально было просто t.minutes, пока мы не придумали функцию getZero
            seconds.innerHTML = getZero(t.seconds); // изначально было просто t.seconds, пока мы не придумали функцию getZero
            // теперь надо предусмотреть ограничитель, чтобы функция (и таймер) не работали бесконечно
            // для этого мы ранее предусматривали дедлайн
            if (t.total <= 0) {
                clearInterval(timeInterval);
            };
        };
    };

    setClock(id, deadline);
}

export default timer;