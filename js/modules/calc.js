function calc() {
    // Цель: создать калькулятор калорий на сайте
    // Задачи:
    // 1. Создать функцию, которая будет видеть, какой из выбранных вариантов активный, и передавать соответствующее значение в итоговую формулу
    // 2. Создать код, который будет передавать вводимые пользователем данные в итоговую формулу
    // 3. Создать итоговую формулу расчёта калорий
    // 4. Предусмотреть сохранение ранее введённых пользователем данных в localStorage

    // для начала, в html-файле добавили id кнопкам выбора пола мужчины или женщины
    // Затем посмотрим на общую формулу подсчёта калорий на случай, если вдруг нужны будут дополнительные данные, которые не указываются на сайте
    // формула расчёта базовой нормы калорий
    // для мужчин: BMR = 88.36 + (13.4 x вес, кг) + (4.8 х рост, см) – (5.7 х возраст, лет)
    // для женщин: BMR = 447.6 + (9.2 x вес, кг) + (3.1 х рост, cм) – (4.3 х возраст, лет)
    // коэффициент дневной активности:
    // Минимальный уровень активности — 1.2
    // Низкий уровень активности — 1.375
    // Средний уровень активности — 1.55
    // Высокий уровень — 1.725
    // Очень высокий —  1.9
    // Норма калорий = BMR x Уровень активности

    // поскольку у уровней дневной активности фиксированные значения, их можно ввести как переменные или как data-атрибуты соответствующих кнопок выбора в html-файле

    const result = document.querySelector('.calculating__result span') // это то поле, где на странице выводится итог расчёта калорий

    let sex, height, weight, age, ratio ;// это переменные, которые являются частью формулы расчёта калорий

    // т.к. мы используем сохранённые в localStorage данные, сделаем проверку, что если в хранилище есть сохранённые данные, то при новой загрузке будут подсвечены сохранённые значения
    // если хранилище пусто, то используем значения переменных по умолчаниию (начальные значения, которые по замыслу дизайнера при открытии страницы подсвечены как бы по умолчанию)
    if (localStorage.getItem('sex')) { // если в хранилище есть сохранённые данные
        sex = localStorage.getItem('sex'); // значение пола подтягивается из хранилища
    } else {
        sex = 'female'; // иначе устанавливается начальное значение пола
        localStorage.setItem('sex', 'female'); // которое сохраняется в хранилище
    }
    // то же самое прописываем для активности
    if (localStorage.getItem('ratio')) { 
        ratio = localStorage.getItem('ratio');
    } else {
        ratio = 1.375; 
        localStorage.setItem('ratio', 1.375);
    }

    // создадим функцию, которая будет запускаться при первом открытии сайта и подсвечивать данные, взятые из localStorage, если такие имеются
    function initLocalSettings(selector, activeClass) {
        const elements = document.querySelectorAll(selector); // это все дивы с вариантами выбора
        // переберём дивы, чтобы сперва очистить все от классов активности
        // а затем класс активности присвоить тому варианту (диву), значение которого совпадёт со значением, сохранённым в localStorage
        elements.forEach(elem => {
            elem.classList.remove(activeClass);
            if (elem.getAttribute('id') === localStorage.getItem('sex')) { // когда во время перебора будет найден элемент со значением пола, совпадающим с хранилищем, ему будет присвоен класс активности
                elem.classList.add(activeClass);
            }
            if (elem.getAttribute('data-ratio') === localStorage.getItem('ratio')) { // когда во время перебора будет найден элемент со значением активности, совпадающим с хранилищем, ему будет присвоен класс активности
                elem.classList.add(activeClass);
            }
        });

    }
    // инициализируем функцию для каждого инпута
    initLocalSettings('#gender div', 'calculating__choose-item_active');
    initLocalSettings('.calculating__choose_big div', 'calculating__choose-item_active');

    // пропишем общую формулу расчёта калорий, делаем в виде функции, потому что она будет вызываться при каждом изменении того или иного поля на сайте
    function calcTotal() {
        if (!sex || !height || !weight || !age || !ratio) { // сперва нужно делать проверку, что все поля заполнены, делаем через оператор отрицания (если чего-то нет, сработает if)
            result.textContent = '____'; // пользователь будет уведомлен, что что-то не так сделано
            return; // выполнение фукнции на этом прекратиться
        }

        if (sex === 'female') { // пропишем формулу расчёта для женщин
            result.textContent = Math.round((447.6 + (9.2 * weight) + (3.1 * height) - (4.3 * age)) * ratio);
        } else { // пропишем формулу расчёта для мужчин
            result.textContent = Math.round((88.36 + (13.4 * weight) + (4.8 * height) - (5.7 * age)) * ratio);
        }
    } 
    // инициализируем функцию, чтобы на странице при загрузке страницы было показано, что не все поля заполнены
    calcTotal();

    // пропишем функцию, которая будет отслеживать, какое из предложенных значений будет выбрано пользователем
    // этот блок кода будет работать для выбора пола и уровня активности (там пользователь просто выбирает, ничего не вводит)
    // для выбранного варианта надо также предусмотреть смену класса активности, это будет подсвечивать выбранный вариант зелёным
    function getStaticInformation(selector, activeClass) {
        const elements = document.querySelectorAll(selector); // сперва функция получает все дивы с вариантами, которые выбирает пользователь
        // используем перебор дивов с вариантами, которые выбирает пользователь
        elements.forEach(elem => {
            elem.addEventListener('click', (e) => {
                // данная функция работает с двумя блоками выборов: выбор пола и активности, но у дивов этих блоков разные атрибуты, которые функция будет вытягивать при выборе пользователя
                // поэтому надо предусмотреть, что если у выбранного элемента есть data-атрибут (он предусмотрен для активности), то функция будет вытягивать такой атрибут, если его нет, функция будет вытягивать id (это предусмотрено для пола)
                if (e.target.getAttribute('data-ratio')) {
                    ratio = +e.target.getAttribute('data-ratio');
                    localStorage.setItem('ratio', +e.target.getAttribute('data-ratio')); // сохраняем в localStorage введённые пользователем данные
                } else {
                    sex = e.target.getAttribute('id');
                    localStorage.setItem('sex', e.target.getAttribute('id')); // сохраняем в localStorage введённые пользователем данные
                }
    
                // предусмотрим смену класса активности у выбранного элемента
                elements.forEach(elem => { // сперва у всех дивов внутри родительского элемента убираем класс активности
                    elem.classList.remove(activeClass);
                });
                
                e.target.classList.add(activeClass); // затем выбранной кнопке добавляем класс активности
    
                calcTotal(); // вызываем функцию, чтобы автоматически пересчитывался расчёт калорий
            });
        });
    };
    // теперь вызовем данную функцию сперва для блока с выбором пола, у него есть свой id, по нему и вызовем функциб
    getStaticInformation('#gender div', 'calculating__choose-item_active');
    // затем для блока с выбором активности
    getStaticInformation('.calculating__choose_big div', 'calculating__choose-item_active');

    // теперь создадим функцию, которая будет вытягивать данные из инпутов - полей, заполненных пользователям
    // функция будет одна, но вызываться для каждого инпута
    function getDynamicInformation(selector) { // функция будет принимать аргументом селектор, позволяющий определить, из какого поля будет браться информация (веса, роста или возраста в нашем случае)
        const input = document.querySelector(selector);

        input.addEventListener('input', () => { // будет срабатывать при каждом изменении ввода пользователем
            // сперва делаем проверку того, правильно ли пользователь вводит данные (дб только цифры)
            if (input.value.match(/\D/g)) { // если пользователь вводит нечисловые символы, его предупредят о недопустимости подобного, в данном случае это делается обводкой красным, а мб сообщением или ещё как
                input.style.border = '1px solid red'; // поле ввода будет обведено красным
            } else { // если всё нормально, поле ввода станет обычного цвета
                input.style.border = 'none'
            }
            // т.к. функция едина на три варианта данных (возраст, вест, рост), она должна понимать, с каким именно полем она работает, для этого используем switch case и id
            switch(input.getAttribute('id')) { // свитч проверяет, какой атрибут у поля, куда вводит данные пользователь
                case 'height': // если это рост
                    height = +input.value; // значение данного поля присваивается переменной роста
                    break; // затем код заканчивает работу
                case 'weight': // та же логика с весом
                    weight = +input.value;
                    break;
                case 'age': // та же логика с ростом
                    age = +input.value;
                    break;
            };

            calcTotal(); // вызываем функцию, чтобы автоматически пересчитывался расчёт калорий
        });
    };
    // теперь вызовем функцию с каждым инпутом
    getDynamicInformation('#height');
    getDynamicInformation('#weight');
    getDynamicInformation('#age');
}

export default calc;