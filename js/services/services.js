const postData = async (url, data) => {
    // т.к. fetch это асинхронный код, то в данной функции сперва будет создаваться запрос, потом он будет присваиваться переменной, затем будет вызвана функция преобразования json() и, наконец, будет возвращён результат
    // поэтому может быть ситуация, когда запрос ещё не обработался (не вернулся ответ от сервера), а дальнейший код уже выполняется, а раз ничего не вернулось, то это значит, что пока имеется значение underfined
    // из-за этого может сработать ошибка (у underfined нет методов, например), и весь дальнейший код не сработает, поэтому нужно искусственно как бы превратить асинхронный код в подобние синхронного
    // поэтому, во-первых, при создании функции мы указываем атрибут async (он показывает, что код внутри функции будет асинхронным), во-вторых, оператор await (который говорит, действие какого кода должна ждать следующая операция)
    // атрибуты async и await парные! их нельзя использовать по одиночке!
    let res = await fetch(url, {
        method: 'POST',
        headers: {
            'Content-type': 'application/json'
        },
        body: data
    });

    return await res.json();
};

async function getResource(url) {
    let res = await fetch(url);

    if (!res.ok) {
        throw new Error(`Could not fetch ${url}, status: ${res.status}`);
    }

    return await res.json();
};

export {postData};
export {getResource};